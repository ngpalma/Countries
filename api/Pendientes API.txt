Carpetas

API/
Archivos: 
    -.env: guardamos las claves de postsgres y las apikeys en caso de ser necesarias
    - index.js: Hacemos el llamado al servidor pasandole la conexion con sequelize. Antes del server.listen debemos llamar a la funcion que trae todos los datos de la API y la guarda en la base de datos. Esa función estara en la carpetra controllers dentro de /src

SRC / 
    Carpetas:
        - Controller
            Archivos: 
                - Todas Las Funciones(GET,POST,etc) que haran el llamado a la API + BDD
                La mayoria de esas funciones retornan un objeto - array que luego usaremos en los handlers
                
        - Handlers
            Archivos:
                - Archivos que manejan los controller: Maneja las respuestas
                con  TRY/CATCH. 
                En la mayoria de los casos de exito retorna un objeto - array que viene de una funcion en controllers. 
                El error se puede manejar como un objeto o como un string y un mensaje.
                A veces el mensaje viene del controller con un throw new Error

        - Models (ya creada):
            Archivos:
                - Modelo -> Country.js
                    solictud de MODELO:  "country"
                    +ID (Código de tres letras). * -> Propiedad API : "cca3" (string)
                    +Nombre. * -> Propiedad API : "name.common" (string)
                    +Imagen de la bandera. *: -> Propiedad API : "flags.png" y "flags.alt" (strings)
                    +Continente. *-> Propiedad API : "continents" [] 
                    +Capital. *-> Propiedad API : "capital" []
                    +Subregión.-> Propiedad API : "subregion" (string)
                    +Área.-> Propiedad API : "area" (number)
                    +Población. *-> Propiedad API : "population" (number)
                    +Timestamps : false

                - Modelo -> Activity.js 
                    solictud de MODELO:  "activity"
                    +ID. * -> UUID (defaultValue(UUIDV4))
                    +name. * ->  (STRING)
                    +difficulty. * -> (INTEGER)
                        Validation{
                            min: 1
                            max: 5
                        }
                    +season. * -> (ENUM("Verano","Otoño","Invierno","Primavera"))
                    +Timestamps : false
        

        - Route (ya Creada):
            Archivos:
                - Route -> /Country
                - Route -> /Activity 

    Archivos: 
        - db.js
            debemos Agregar: 
            linea 9 --> debe coincidir nuestro nombre de base de datos con el de la ruta de postsgres
            linea 33 -> const { Country, Activity } = sequealize.models traemos los modelos

            Hacemos las relaciones entre ambos (en este caso, de muchos a muchos)
            En un pais se pueden realizar muchas actividades.
            Una actividad se puede realizar en varios paises.
            Country.belongToMany (Activity, {true: Coun_Act})
            Activity.belongToMany (Country, {true: Coun_Act})        

            